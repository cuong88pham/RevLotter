type User {
  uid: ID!
  username: String!
  full_name: String
  first_name: String
  last_name: String
  email: String
  phone: String
  avatar: String
  status: UserStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: UserRole!
}

input RegisterInput {
  email: String!
  password: String!
  first_name: String
  last_name: String
}

input InputUpdateUser {
  full_name: String
  first_name: String
  last_name: String
  phone: String
  avatar: String
}

type UserFitlterdRuslt {
  data: [User!]
  pageToken: String
}

input FilterTableUser {
  pageSize: Int
  nextPageToken: String
}

type Query {
  get_users(filter: FilterTableUser): UserFitlterdRuslt!
  get_user(uid: ID!): User
  get_me: User!
}

type Mutation {
  regiter_account(input: RegisterInput!): User!
  create_mod_account(input: RegisterInput!): User!
  update_my_info(input: InputUpdateUser!): Boolean!
  update_user_status(uid: ID!, action: UpdateStatusAction!): Boolean!
}

enum UserRole {
  ADMIN
  MOD
  USER
}

enum UserStatus {
  ACTIVE
  BANNED
}
enum UpdateStatusAction {
  BAN
  UNBAN
}
